const express = require('express');
const { body, validationResult, query } = require('express-validator');
const { requireRole, requirePermission } = require('../middleware/auth');
const { createAuditLog } = require('../utils/auditLogger');
const { Op } = require('sequelize');

const router = express.Router();

// Get academic performance report
router.get('/academic-performance', [
  query('classId').optional().isString(),
  query('subjectId').optional().isString(),
  query('examId').optional().isString(),
  query('startDate').optional().isISO8601(),
  query('endDate').optional().isISO8601()
], requirePermission('Reports', 'view'), async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        error: 'Validation Error',
        message: 'Please check your input data',
        details: errors.array()
      });
    }

    const { classId, subjectId, examId, startDate, endDate } = req.query;

    // Mock academic performance data
    const performanceData = {
      summary: {
        totalStudents: 150,
        averageScore: 75.5,
        highestScore: 98,
        lowestScore: 45,
        passRate: 85.3
      },
      classPerformance: [
        { className: 'Class 1A', averageScore: 78.2, totalStudents: 30, passRate: 90.0 },
        { className: 'Class 1B', averageScore: 76.8, totalStudents: 28, passRate: 85.7 },
        { className: 'Class 2A', averageScore: 72.5, totalStudents: 32, passRate: 81.3 },
        { className: 'Class 2B', averageScore: 74.1, totalStudents: 29, passRate: 86.2 },
        { className: 'Class 3A', averageScore: 79.3, totalStudents: 31, passRate: 93.5 }
      ],
      subjectPerformance: [
        { subject: 'Mathematics', averageScore: 72.1, totalStudents: 150, passRate: 78.5 },
        { subject: 'English', averageScore: 78.3, totalStudents: 150, passRate: 88.2 },
        { subject: 'Science', averageScore: 76.8, totalStudents: 150, passRate: 82.1 },
        { subject: 'History', averageScore: 80.2, totalStudents: 150, passRate: 91.3 },
        { subject: 'Geography', averageScore: 77.5, totalStudents: 150, passRate: 85.7 }
      ],
      topPerformers: [
        { studentName: 'John Doe', class: 'Class 3A', averageScore: 95.2, rank: 1 },
        { studentName: 'Jane Smith', class: 'Class 3A', averageScore: 93.8, rank: 2 },
        { studentName: 'Mike Johnson', class: 'Class 2A', averageScore: 92.1, rank: 3 },
        { studentName: 'Sarah Wilson', class: 'Class 3B', averageScore: 91.5, rank: 4 },
        { studentName: 'David Brown', class: 'Class 2B', averageScore: 90.8, rank: 5 }
      ]
    };

    // Create audit log
    await createAuditLog(req.user.id, 'Academic Performance Report Generated', { 
      type: 'Report', 
      reportType: 'Academic Performance',
      filters: { classId, subjectId, examId, startDate, endDate }
    }, `Generated by ${req.user.name}`);

    res.json({
      report: performanceData,
      filters: { classId, subjectId, examId, startDate, endDate },
      generatedAt: new Date().toISOString()
    });

  } catch (error) {
    console.error('Academic performance report error:', error);
    res.status(500).json({
      error: 'Failed to generate academic performance report',
      message: 'An error occurred while generating the report'
    });
  }
});

// Get attendance report
router.get('/attendance', [
  query('classId').optional().isString(),
  query('studentId').optional().isString(),
  query('startDate').optional().isISO8601(),
  query('endDate').optional().isISO8601(),
  query('type').optional().isIn(['daily', 'weekly', 'monthly'])
], requirePermission('Reports', 'view'), async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        error: 'Validation Error',
        message: 'Please check your input data',
        details: errors.array()
      });
    }

    const { classId, studentId, startDate, endDate, type = 'monthly' } = req.query;

    // Mock attendance data
    const attendanceData = {
      summary: {
        totalDays: 90,
        presentDays: 82,
        absentDays: 6,
        lateDays: 2,
        attendanceRate: 91.1
      },
      classAttendance: [
        { className: 'Class 1A', attendanceRate: 94.2, totalStudents: 30, averageAttendance: 28.3 },
        { className: 'Class 1B', attendanceRate: 92.8, totalStudents: 28, averageAttendance: 26.0 },
        { className: 'Class 2A', attendanceRate: 89.5, totalStudents: 32, averageAttendance: 28.6 },
        { className: 'Class 2B', attendanceRate: 91.3, totalStudents: 29, averageAttendance: 26.5 },
        { className: 'Class 3A', attendanceRate: 93.7, totalStudents: 31, averageAttendance: 29.0 }
      ],
      monthlyTrend: [
        { month: 'January', attendanceRate: 92.5 },
        { month: 'February', attendanceRate: 91.8 },
        { month: 'March', attendanceRate: 93.2 },
        { month: 'April', attendanceRate: 90.9 },
        { month: 'May', attendanceRate: 92.1 },
        { month: 'June', attendanceRate: 91.5 }
      ],
      topAttendees: [
        { studentName: 'John Doe', class: 'Class 3A', attendanceRate: 98.5, daysPresent: 89 },
        { studentName: 'Jane Smith', class: 'Class 3A', attendanceRate: 97.8, daysPresent: 88 },
        { studentName: 'Mike Johnson', class: 'Class 2A', attendanceRate: 96.7, daysPresent: 87 },
        { studentName: 'Sarah Wilson', class: 'Class 3B', attendanceRate: 96.3, daysPresent: 86 },
        { studentName: 'David Brown', class: 'Class 2B', attendanceRate: 95.8, daysPresent: 85 }
      ]
    };

    // Create audit log
    await createAuditLog(req.user.id, 'Attendance Report Generated', { 
      type: 'Report', 
      reportType: 'Attendance',
      filters: { classId, studentId, startDate, endDate, type }
    }, `Generated by ${req.user.name}`);

    res.json({
      report: attendanceData,
      filters: { classId, studentId, startDate, endDate, type },
      generatedAt: new Date().toISOString()
    });

  } catch (error) {
    console.error('Attendance report error:', error);
    res.status(500).json({
      error: 'Failed to generate attendance report',
      message: 'An error occurred while generating the report'
    });
  }
});

// Get financial report
router.get('/financial', [
  query('startDate').optional().isISO8601(),
  query('endDate').optional().isISO8601(),
  query('type').optional().isIn(['income', 'expenses', 'balance'])
], requirePermission('Reports', 'view'), async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        error: 'Validation Error',
        message: 'Please check your input data',
        details: errors.array()
      });
    }

    const { startDate, endDate, type = 'balance' } = req.query;

    // Mock financial data
    const financialData = {
      summary: {
        totalIncome: 2500000,
        totalExpenses: 1800000,
        netBalance: 700000,
        outstandingFees: 150000,
        collectedFees: 2350000
      },
      monthlyIncome: [
        { month: 'January', income: 420000, expenses: 300000, balance: 120000 },
        { month: 'February', income: 380000, expenses: 280000, balance: 100000 },
        { month: 'March', income: 450000, expenses: 320000, balance: 130000 },
        { month: 'April', income: 410000, expenses: 290000, balance: 120000 },
        { month: 'May', income: 440000, expenses: 310000, balance: 130000 },
        { month: 'June', income: 400000, expenses: 300000, balance: 100000 }
      ],
      feeCollection: [
        { category: 'Tuition Fees', collected: 1800000, outstanding: 100000, total: 1900000 },
        { category: 'Transport Fees', collected: 300000, outstanding: 25000, total: 325000 },
        { category: 'Library Fees', collected: 150000, outstanding: 15000, total: 165000 },
        { category: 'Other Fees', collected: 100000, outstanding: 10000, total: 110000 }
      ],
      expenseBreakdown: [
        { category: 'Salaries', amount: 1200000, percentage: 66.7 },
        { category: 'Utilities', amount: 200000, percentage: 11.1 },
        { category: 'Maintenance', amount: 150000, percentage: 8.3 },
        { category: 'Supplies', amount: 100000, percentage: 5.6 },
        { category: 'Other', amount: 150000, percentage: 8.3 }
      ]
    };

    // Create audit log
    await createAuditLog(req.user.id, 'Financial Report Generated', { 
      type: 'Report', 
      reportType: 'Financial',
      filters: { startDate, endDate, type }
    }, `Generated by ${req.user.name}`);

    res.json({
      report: financialData,
      filters: { startDate, endDate, type },
      generatedAt: new Date().toISOString()
    });

  } catch (error) {
    console.error('Financial report error:', error);
    res.status(500).json({
      error: 'Failed to generate financial report',
      message: 'An error occurred while generating the report'
    });
  }
});

// Get student enrollment report
router.get('/enrollment', [
  query('startDate').optional().isISO8601(),
  query('endDate').optional().isISO8601(),
  query('classId').optional().isString()
], requirePermission('Reports', 'view'), async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        error: 'Validation Error',
        message: 'Please check your input data',
        details: errors.array()
      });
    }

    const { startDate, endDate, classId } = req.query;

    // Mock enrollment data
    const enrollmentData = {
      summary: {
        totalStudents: 450,
        newEnrollments: 85,
        withdrawals: 12,
        netGrowth: 73,
        growthRate: 19.3
      },
      classEnrollment: [
        { className: 'Class 1A', totalStudents: 30, newEnrollments: 5, withdrawals: 1 },
        { className: 'Class 1B', totalStudents: 28, newEnrollments: 4, withdrawals: 0 },
        { className: 'Class 2A', totalStudents: 32, newEnrollments: 6, withdrawals: 2 },
        { className: 'Class 2B', totalStudents: 29, newEnrollments: 3, withdrawals: 1 },
        { className: 'Class 3A', totalStudents: 31, newEnrollments: 7, withdrawals: 1 },
        { className: 'Class 3B', totalStudents: 30, newEnrollments: 4, withdrawals: 1 }
      ],
      monthlyEnrollment: [
        { month: 'January', newEnrollments: 15, withdrawals: 2, netGrowth: 13 },
        { month: 'February', newEnrollments: 12, withdrawals: 1, netGrowth: 11 },
        { month: 'March', newEnrollments: 18, withdrawals: 3, netGrowth: 15 },
        { month: 'April', newEnrollments: 14, withdrawals: 2, netGrowth: 12 },
        { month: 'May', newEnrollments: 16, withdrawals: 2, netGrowth: 14 },
        { month: 'June', newEnrollments: 10, withdrawals: 2, netGrowth: 8 }
      ],
      genderDistribution: [
        { gender: 'Male', count: 235, percentage: 52.2 },
        { gender: 'Female', count: 215, percentage: 47.8 }
      ],
      ageDistribution: [
        { ageGroup: '5-7 years', count: 120, percentage: 26.7 },
        { ageGroup: '8-10 years', count: 150, percentage: 33.3 },
        { ageGroup: '11-13 years', count: 180, percentage: 40.0 }
      ]
    };

    // Create audit log
    await createAuditLog(req.user.id, 'Enrollment Report Generated', { 
      type: 'Report', 
      reportType: 'Enrollment',
      filters: { startDate, endDate, classId }
    }, `Generated by ${req.user.name}`);

    res.json({
      report: enrollmentData,
      filters: { startDate, endDate, classId },
      generatedAt: new Date().toISOString()
    });

  } catch (error) {
    console.error('Enrollment report error:', error);
    res.status(500).json({
      error: 'Failed to generate enrollment report',
      message: 'An error occurred while generating the report'
    });
  }
});

// Get teacher performance report
router.get('/teacher-performance', [
  query('teacherId').optional().isString(),
  query('startDate').optional().isISO8601(),
  query('endDate').optional().isISO8601()
], requirePermission('Reports', 'view'), async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        error: 'Validation Error',
        message: 'Please check your input data',
        details: errors.array()
      });
    }

    const { teacherId, startDate, endDate } = req.query;

    // Mock teacher performance data
    const teacherPerformanceData = {
      summary: {
        totalTeachers: 25,
        averageStudentScores: 76.8,
        averageAttendance: 92.5,
        totalClasses: 120
      },
      teacherRankings: [
        { teacherName: 'John Smith', subject: 'Mathematics', averageScore: 85.2, attendance: 95.8, rank: 1 },
        { teacherName: 'Sarah Johnson', subject: 'English', averageScore: 82.1, attendance: 93.2, rank: 2 },
        { teacherName: 'Mike Davis', subject: 'Science', averageScore: 80.5, attendance: 91.7, rank: 3 },
        { teacherName: 'Lisa Wilson', subject: 'History', averageScore: 78.9, attendance: 94.1, rank: 4 },
        { teacherName: 'David Brown', subject: 'Geography', averageScore: 77.3, attendance: 90.5, rank: 5 }
      ],
      subjectPerformance: [
        { subject: 'Mathematics', averageScore: 82.5, totalStudents: 150, improvement: 5.2 },
        { subject: 'English', averageScore: 79.8, totalStudents: 150, improvement: 3.1 },
        { subject: 'Science', averageScore: 78.2, totalStudents: 150, improvement: 4.7 },
        { subject: 'History', averageScore: 81.1, totalStudents: 150, improvement: 2.8 },
        { subject: 'Geography', averageScore: 76.9, totalStudents: 150, improvement: 3.5 }
      ],
      monthlyTrends: [
        { month: 'January', averageScore: 74.5, attendance: 91.2 },
        { month: 'February', averageScore: 75.8, attendance: 92.1 },
        { month: 'March', averageScore: 77.2, attendance: 93.5 },
        { month: 'April', averageScore: 76.9, attendance: 92.8 },
        { month: 'May', averageScore: 78.1, attendance: 94.2 },
        { month: 'June', averageScore: 76.8, attendance: 92.5 }
      ]
    };

    // Create audit log
    await createAuditLog(req.user.id, 'Teacher Performance Report Generated', { 
      type: 'Report', 
      reportType: 'Teacher Performance',
      filters: { teacherId, startDate, endDate }
    }, `Generated by ${req.user.name}`);

    res.json({
      report: teacherPerformanceData,
      filters: { teacherId, startDate, endDate },
      generatedAt: new Date().toISOString()
    });

  } catch (error) {
    console.error('Teacher performance report error:', error);
    res.status(500).json({
      error: 'Failed to generate teacher performance report',
      message: 'An error occurred while generating the report'
    });
  }
});

// Export report to PDF/Excel
router.post('/export', [
  body('reportType').isIn(['academic-performance', 'attendance', 'financial', 'enrollment', 'teacher-performance']),
  body('format').isIn(['pdf', 'excel']),
  body('filters').optional().isObject()
], requirePermission('Reports', 'export'), async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        error: 'Validation Error',
        message: 'Please check your input data',
        details: errors.array()
      });
    }

    const { reportType, format, filters = {} } = req.body;

    // Mock export response
    const exportData = {
      downloadUrl: `/api/reports/downloads/${reportType}-${Date.now()}.${format}`,
      fileName: `${reportType}-report-${new Date().toISOString().split('T')[0]}.${format}`,
      fileSize: format === 'pdf' ? '2.5MB' : '1.8MB',
      expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString() // 24 hours
    };

    // Create audit log
    await createAuditLog(req.user.id, 'Report Exported', { 
      type: 'Report Export', 
      reportType,
      format,
      filters
    }, `Exported by ${req.user.name}`);

    res.json({
      message: 'Report exported successfully',
      export: exportData
    });

  } catch (error) {
    console.error('Export report error:', error);
    res.status(500).json({
      error: 'Failed to export report',
      message: 'An error occurred while exporting the report'
    });
  }
});

// Get available report types
router.get('/types', async (req, res) => {
  try {
    const reportTypes = [
      {
        id: 'academic-performance',
        name: 'Academic Performance Report',
        description: 'Comprehensive analysis of student academic performance',
        category: 'Academic',
        permissions: ['Reports', 'view']
      },
      {
        id: 'attendance',
        name: 'Attendance Report',
        description: 'Student and class attendance analysis',
        category: 'Academic',
        permissions: ['Reports', 'view']
      },
      {
        id: 'financial',
        name: 'Financial Report',
        description: 'School financial performance and fee collection analysis',
        category: 'Financial',
        permissions: ['Reports', 'view']
      },
      {
        id: 'enrollment',
        name: 'Enrollment Report',
        description: 'Student enrollment trends and demographics',
        category: 'Administrative',
        permissions: ['Reports', 'view']
      },
      {
        id: 'teacher-performance',
        name: 'Teacher Performance Report',
        description: 'Teacher effectiveness and performance analysis',
        category: 'Academic',
        permissions: ['Reports', 'view']
      }
    ];

    res.json({ reportTypes });

  } catch (error) {
    console.error('Get report types error:', error);
    res.status(500).json({
      error: 'Failed to fetch report types',
      message: 'An error occurred while fetching report types'
    });
  }
});

module.exports = router; 